{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","dialogsItems","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uICG9KC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAIVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAI,eAJV,GAEXC,IAAML,WAWtC,OAFqCM,YAAQX,EAARW,CAAqCL,K,uGCN/DM,EAVI,SAACJ,GAChB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAAST,GAAII,GAAOL,EAAMW,QCKvBC,EARC,SAACZ,GACb,OACI,yBAAKO,UAAWC,IAAEK,SAAUb,EAAMa,U,iCC+BpCC,EAAcC,YAAiB,IAkB/BC,EAAqBC,YAAU,CAACC,KAAM,yBAAjBD,EAhBJ,SAACjB,GACpB,OACI,0BAAMmB,SAAUnB,EAAMoB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOV,KAAK,iBACLW,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBY,YAAY,wBAEvB,6BACI,oDAQDC,EAhDC,SAAC3B,GAEb,IAAIP,EAAQO,EAAM4B,YAEdC,EAAkBpC,EAAMqC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE1B,GAAIA,GAAI0B,EAAE1B,QACpF4B,EAAmBzC,EAAM0C,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE9B,QAC9Db,EAAM4C,eAO3B,OAAKrC,EAAMN,OAGP,yBAAKa,UAAWC,IAAEsB,SACd,yBAAKvB,UAAWC,IAAE8B,cACbT,GAEL,yBAAKtB,UAAWC,IAAE2B,UACd,6BAAMD,IAEV,kBAAClB,EAAD,CAAqBG,SAdT,SAACoB,GACjBvC,EAAMwC,YAAYD,EAAOF,oBAGH,kBAAC,IAAD,CAAUpC,GAAI,Y,wBCC7BwC,sBACXtC,aAhBkB,SAACV,GACnB,MAAO,CACHmC,YAAanC,EAAMmC,gBAIF,SAACc,GACtB,MAAO,CACHF,YAAa,SAACH,GACVK,EAASC,YAAmBN,SAQpCzC,IAFW6C,CAGZd","file":"static/js/4.28f1dce5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2277-\",\"dialogsItems\":\"Dialogs_dialogsItems__1JaFY\",\"active\":\"Dialogs_active__3h2MW\",\"messages\":\"Dialogs_messages__F88rK\",\"message\":\"Dialogs_message__2gDyj\"};","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {Redirect} from 'react-router-dom';\n\nlet mapStateToPropsForRedirect = (state) => ({  \n    isAuth: state.auth.isAuth\n  });\n\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {                       \n            if (!this.props.isAuth) return <Redirect to={\"/login\"} />;\n            \n            return <Component {...this.props} />              \n        }\n    }\n\n    \n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n\n    return ConnectedAuthRedirectComponent;\n} ","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\nimport s from './Dialogs.module.css'\nimport { Redirect } from 'react-router-dom';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport { Field, reduxForm } from 'redux-form'\nimport { Textarea } from '../common/Preloader/FormsControls/FormsControls';\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\n\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />)\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />)\n    let newMessageBody = state.newMessageBody;   \n\n    \n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>              \n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name=\"newMessageBody\" \n                       component={Textarea}\n                       validate={[required, maxLength50]}\n                       placeholder=\"Enter your message\" />\n            </div>\n            <div>\n                <button>Add message</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux =reduxForm({form: 'dialogsAddMessageForm'})(AddMessageForm)\n\nexport default Dialogs;","import React from 'react';\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from \"redux\";\n\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    }\n}\n\n\nexport default compose (\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n) (Dialogs);"],"sourceRoot":""}